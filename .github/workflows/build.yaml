name: Build

on:
  push:
    branches: ["**"]
    tags-ignore: ["**"]
    paths-ignore:
      - "**.md"
      - LICENSE-Apache
      - LICENSE-MIT
  pull_request:
    paths-ignore:
      - "**.md"
      - LICENSE-Apache
      - LICENSE-MIT
  schedule:
    - cron: "0 0 * * 6" # midnight on Saturdays

jobs:
  check:
    name: Type checking (${{ matrix.version.range }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        version:
          - { range: "1.36..1.45", first: "1.36" }
          - { range: "1.46..1.51", first: "1.46" }
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.version.first }}

      - name: Install cargo-hack
        shell: bash
        run: |
          host=$(rustc -Vv | grep host | sed 's/host: //')
          if [[ $host =~ windows ]]; then
              curl -LsSf https://github.com/taiki-e/cargo-hack/releases/latest/download/cargo-hack-${host}.zip -o cargo-hack.zip
              7z x cargo-hack.zip -o$HOME/.cargo/bin
          elif [[ $host =~ darwin|linux ]]; then
              curl -LsSf https://github.com/taiki-e/cargo-hack/releases/latest/download/cargo-hack-${host}.tar.gz | tar xzf - -C ~/.cargo/bin
          else
              echo "unsupported operating system"
              exit 1
          fi

      - name: Cache cargo output
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.version.range }}

      - name: Check powerset
        uses: actions-rs/cargo@v1
        with:
          command: hack
          args: |
            check
            --feature-powerset
            --exclude-features default
            --version-range ${{ matrix.version.range }}

  check-embedded:
    name: Type checking on embedded (${{ matrix.version.range }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        version:
          - { range: "1.36..1.45", first: "1.36" }
          - { range: "1.46..1.51", first: "1.46" }
        os: [ubuntu-latest]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.version.first }}
          target: thumbv7em-none-eabihf
          override: true

      - name: Install cargo-hack
        shell: bash
        run: |
          curl -LsSf https://github.com/taiki-e/cargo-hack/releases/latest/download/cargo-hack-x86_64-unknown-linux-gnu.tar.gz | tar xzf - -C ~/.cargo/bin

      - name: Cache cargo output
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.version.range }}-embedded

      - name: Check powerset
        uses: actions-rs/cargo@v1
        with:
          command: hack
          args: |
            check
            --feature-powerset
            --exclude-features default,std
            --version-range ${{ matrix.version.range }}
            --target thumbv7em-none-eabihf

  fmt:
    name: Formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt

      - name: Run `cargo fmt -- --check`
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check
